using System.Text;
using CypressDocTree;

namespace CypressDocVisitors
{
    public class HTMLVisitor : IDocumentVisitor
    {
        #region Private
        private const string END_TABLE = "</table>\n";
        private const string END_PARAGRAPH = "\n</p>\n";
        private const string END_SECTION = "\n</section>\n";
        protected StringBuilder _document;
        private const string ERROR_COLOR = "salmon";
        #endregion

        #region Public
        /// <summary>
        /// Gets the HTML generated by this instance
        /// </summary>
        public string HTML
        {
            get { return _document.ToString(); }
        }

        /// <summary>
        /// Use a CSS style in the <head>Section of the document</head>
        /// </summary>
        public bool UseCSS { get; set; } = false;
        /// <summary>
        /// Use an external css file. 
        /// </summary>
        public bool UseExternalCSS { get; set; } = false;
        /// <summary>
        /// The path of the external css file
        /// </summary>
        public string ExternalCssFilePath { get; set; }
        /// <summary>
        /// Add the document title at top of page
        /// </summary>
        public bool ShowTitle { get; set; } = false;
        /// <summary>
        /// Gets or sets the CSS style to be used for the entire document.
        /// Only used if UseCSS = true;
        /// </summary>
        public string Style { get; set; } = null;
        #endregion


        public virtual void Visit(CyDocument doc)
        {
            _document = new StringBuilder("<!DOCTYPE html><html><head>\n");

            //Using an external stylesheet
            if (!string.IsNullOrWhiteSpace(ExternalCssFilePath) && UseExternalCSS)
                _document.Append($"<link rel=\"stylesheet\" href=\"{ExternalCssFilePath}\"/>");

            //Using an internal stylesheet
            if (Style != null && UseCSS)
                _document.Append(Style);

            _document.Append("<title>");
            if (doc.Title != null)
                _document.Append(doc.Title);

            _document.Append("</title></head>\n\n<body");
            _document.Append(">\n");

            if (doc.Title != null && ShowTitle)
                _document.Append($"<h1>{doc.Title}</h1>\n");

            foreach (var item in doc.ChildElements)
                item.Accept(this);

            _document.Append("\n</body>\n</html>\n");
        }//End Visit(CyDocument)

        public virtual void Visit(CyTable table)
        {
            StringBuilder currentBlock = new StringBuilder("<table");

            if (!UseCSS)
            {
                int _width = table.Width;
                if (_width > 0)
                {
                    currentBlock.Append($" WIDTH={_width}");
                    if (table.PercentageWidth)
                        currentBlock.Append("% ");
                    else
                        currentBlock.Append(" ");
                }

                if (table.Border > 0)
                    currentBlock.Append($" border={table.Border}");

                if (table.CellPadding > 0)
                    currentBlock.Append($" cellspacing={table.CellPadding}");
            }//End if(UseCSS)

            currentBlock.Append(">\n");

            string caption = table.Caption;
            if (caption != null)
                currentBlock.Append($"\n<caption>{caption}</caption>\n");

            _document.Append(currentBlock.ToString());

            foreach (var item in table.ChildElements)
                item.Accept(this);

            _document.Append(END_TABLE);
        }//End Visit(CyTable)

        public virtual void Visit(CyTableRow row)
        {
            _document.Append("<tr");
            if(!string.IsNullOrWhiteSpace(row.Tag))
            {
                _document.Append($" class={row.Tag}");
            }
            _document.Append(">");
            foreach (var item in row.ChildElements)
                item.Accept(this);

            _document.Append("</tr>\n");
        }//End Visit(Row)

        public virtual void Visit(CyTableCell cell)
        {
            StringBuilder currentBlock = new StringBuilder();
            string tag = null;
            if (cell.Type == CellType.DATA)
                tag = "td";
            else
                tag = "th";

            currentBlock.Append($"\n\t<{tag}");

            if (!string.IsNullOrWhiteSpace(cell.Tag))
            {
               currentBlock.Append($" class={cell.Tag}");
            }

            if (!UseCSS && !UseExternalCSS)
            {
                string valign = null;
                string align = null;

                switch (cell.VerticalAlignment)
                {
                    case Alignment.TOP:
                        valign = "TOP";
                        break;
                    case Alignment.MIDDLE:
                        valign = "MIDDLE";
                        break;
                    default:
                        valign = "BOTTOM";
                        break;
                }

                switch (cell.HorizontalAlignment)
                {
                    case Alignment.LEFT:
                        align = "LEFT";
                        break;
                    case Alignment.CENTER:
                        align = "CENTER";
                        break;
                    default:
                        align = "RIGHT";
                        break;
                }

                currentBlock.Append($" VALIGN={valign} ALIGN={align}");
            }//End if(!UseCSS)

            if (cell.ColumnSpan > 1)
                currentBlock.Append($" COLSPAN={cell.ColumnSpan}");

            currentBlock.Append(">");
            _document.Append(currentBlock.ToString());

            foreach (var item in cell.ChildElements)
                item.Accept(this);

            _document.Append($"</{tag}>");
        }//End Visit(Cell)

        public virtual void Visit(CyText txt)
        {
            StringBuilder CHTML = new StringBuilder(txt.Text);

            if (txt.IsBold)
            {
                CHTML.Insert(0, "<b>");
                CHTML.Append("</b>");
            }

            if (txt.IsPreformatted)
            {
                CHTML.Insert(0, "<pre>");
                CHTML.Append("</pre>");
            }

            _document.Append(CHTML.ToString());
        }//End Visit(Text)

        public virtual void Visit(CyParagraph paragraph)
        {
            StringBuilder tag = new StringBuilder("<p");
            if (paragraph.Tag != null)
            {
                tag.Append($" class=\"{paragraph.Tag}\"");
            }
            tag.Append(">");
            _document.Append($"{tag}{paragraph.Text}{END_PARAGRAPH}");
        }//End Visit(CyParagraph)

        public virtual void Visit(CySection section)
        {
            StringBuilder tag = new StringBuilder("<section");
            if (section.Tag != null)
            {
                tag.Append($" class=\"{section.Tag}\"");
            }

            tag.Append(">");

            foreach (var child in section.ChildElements)
            {
                child.Accept(this);
            }
            _document.Append($"{tag}{END_SECTION}");
        }//End Visit(CyParagraph)

        public virtual void Visit(CyHeading heading)
        {
            StringBuilder currentBlock = new StringBuilder();
            string tag, endTag;
            switch (heading.HeadingStyle)
            {
                case HeadingStyle.H1:
                    tag = "<h1>"; endTag = "</h1>";
                    break;
                case HeadingStyle.H2:
                    tag = "<h2>"; endTag = "</h2>";
                    break;
                case HeadingStyle.H3:
                    tag = "<h3>"; endTag = "</h3>";
                    break;
                case HeadingStyle.H4:
                    tag = "<h4>"; endTag = "</h4>";
                    break;
                case HeadingStyle.H5:
                    tag = "<h5>"; endTag = "</h5>";
                    break;
                case HeadingStyle.H6:
                    tag = "<h6>"; endTag = "</h6>";
                    break;
                default:
                    tag = "<h1>"; endTag = "</h1>";
                    break;
            }//End Switch

            if (heading.Tag != null)
                tag = tag.Insert(3, $" class=\"{heading.Tag}\"");

            currentBlock.Append(tag)
                .Append(heading.Text)
                .Append(endTag).Append("\n");
            _document.Append(currentBlock.ToString());
        }//End Visit CyHeading
    }//End Tag
}//End namespace
